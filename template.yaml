AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Stackery Serverless CRUD API Demo
Resources:
  getUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getUser
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: getUser
      CodeUri: src/getUser
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref usersTable
          TABLE_ARN: !GetAtt usersTable.Arn
      Events:
        UsersApiGETusersid:
          Type: HttpApi
          Properties:
            Path: /users/{id}
            Method: GET
            ApiId: !Ref UsersApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
    Metadata:
      StackeryName: getUser
  updateUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-updateUser
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: updateUser
      CodeUri: src/updateUser
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref usersTable
          TABLE_ARN: !GetAtt usersTable.Arn
      Events:
        UsersApiPUTusersid:
          Type: HttpApi
          Properties:
            Path: /users/{id}
            Method: PUT
            ApiId: !Ref UsersApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
    Metadata:
      StackeryName: updateUser
  createUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-createUser
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: createUser
      CodeUri: src/createUser
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref usersTable
          TABLE_ARN: !GetAtt usersTable.Arn
      Events:
        UsersApiPOSTusers:
          Type: HttpApi
          Properties:
            Path: /users
            Method: POST
            ApiId: !Ref UsersApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
    Metadata:
      StackeryName: createUser
  deleteUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deleteUser
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: deleteUser
      CodeUri: src/deleteUser
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref usersTable
          TABLE_ARN: !GetAtt usersTable.Arn
      Events:
        UsersApiDELETEusersid:
          Type: HttpApi
          Properties:
            Path: /users/{id}
            Method: DELETE
            ApiId: !Ref UsersApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
    Metadata:
      StackeryName: deleteUser
  listUsers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-listUsers
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: listUsers
      CodeUri: src/listUsers
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref usersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref usersTable
          TABLE_ARN: !GetAtt usersTable.Arn
      Events:
        UsersApiGETusers:
          Type: HttpApi
          Properties:
            Path: /users
            Method: GET
            ApiId: !Ref UsersApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
    Metadata:
      StackeryName: listUsers
  usersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-usersTable
    Metadata:
      StackeryName: Users
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
  UsersApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi
          version: '1.0'
        paths:
          /users:
            get:
              responses: {}
            post:
              responses: {}
          /users/{id}:
            get:
              responses: {}
            put:
              responses: {}
            delete:
              responses: {}
      FailOnWarnings: true
      Auth:
        Authorizers:
          AuthorizeUser:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref UserPoolClient
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)